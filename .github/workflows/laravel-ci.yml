name: Laravel CI with Code Quality

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, bcmath, pdo, pdo_mysql, xdebug
        coverage: xdebug

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Copy .env and generate app key
      run: |
        cp .env.example .env
        php artisan key:generate

    - name: Set Laravel storage permission
      run: chmod -R 777 storage bootstrap/cache

    - name: Run Laravel migrations
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: root
        DB_PASSWORD: root
      run: php artisan migrate --force

    # Laravel Pint - Most reliable Laravel code style tool
    - name: Install Laravel Pint
      run: |
        if ! composer show laravel/pint > /dev/null 2>&1; then
          composer require laravel/pint --dev
        fi

    - name: Laravel Pint Code Style Check
      run: ./vendor/bin/pint --test
      continue-on-error: true

    # Security Checker - No dependency conflicts
    - name: Install Security Checker
      run: composer require enlightn/security-checker --dev

    - name: Security Vulnerability Check
      run: ./vendor/bin/security-checker security:check composer.lock
      continue-on-error: true

    # Run Tests with Coverage
    - name: Run Laravel tests with coverage
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: root
        DB_PASSWORD: root
        XDEBUG_MODE: coverage
      run: php artisan test --coverage --min=70

    # Generate Coverage Report
    - name: Generate Code Coverage Report
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: root
        DB_PASSWORD: root
        XDEBUG_MODE: coverage
      run: php artisan test --coverage-clover=coverage.xml

    # Upload to Codecov
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Separate job for static analysis to avoid conflicts
  static-analysis:
    runs-on: ubuntu-latest
    needs: laravel-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, bcmath, pdo, pdo_mysql

    - name: Install base dependencies
      run: composer install --prefer-dist --no-progress

    - name: Copy .env for analysis
      run: cp .env.example .env && php artisan key:generate

    # PHPStan with compatible version
    - name: Install PHPStan (v1.x for Laravel compatibility)
      run: |
        composer remove phpstan/phpstan --dev --no-update || true
        composer require phpstan/phpstan:^1.12 nunomaduro/larastan --dev --with-all-dependencies

    - name: PHPStan Analysis
      run: |
        cat > phpstan.neon << EOF
        includes:
            - ./vendor/nunomaduro/larastan/extension.neon
        parameters:
            paths:
                - app/
            level: 5
            ignoreErrors:
                - '#Call to an undefined method App\\\\Models\\\\.*::#'
                - '#Cannot call method.*on.*null#'
        EOF
        ./vendor/bin/phpstan analyse --memory-limit=2G
      continue-on-error: true

  # Code Quality job - separate to avoid conflicts
  code-quality:
    runs-on: ubuntu-latest
    needs: laravel-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, bcmath, pdo, pdo_mysql

    - name: Install base dependencies
      run: composer install --prefer-dist --no-progress

    # PHP CodeSniffer
    - name: Install PHP CodeSniffer
      run: composer require squizlabs/php_codesniffer --dev

    - name: PHP CodeSniffer Check
      run: |
        ./vendor/bin/phpcs --standard=PSR12 app/ --ignore=*/vendor/*,*/storage/*,*/bootstrap/cache/* || true
        echo "✅ PHPCS completed"
      continue-on-error: true

    # PHP Mess Detector
    - name: Install PHP Mess Detector
      run: composer require phpmd/phpmd --dev

    - name: PHP Mess Detector Analysis
      run: |
        ./vendor/bin/phpmd app/ text cleancode,codesize,design,naming,unusedcode --ignore-violations-on-exit || true
        echo "✅ PHPMD completed"
      continue-on-error: true

    # PHP CS Fixer
    - name: Install PHP CS Fixer
      run: composer require friendsofphp/php-cs-fixer --dev

    - name: PHP CS Fixer Check
      run: |
        ./vendor/bin/php-cs-fixer fix --dry-run --diff --verbose || true
        echo "✅ PHP CS Fixer completed"
      continue-on-error: true

  # Alternative lightweight analysis job
  lightweight-analysis:
    runs-on: ubuntu-latest
    needs: laravel-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, bcmath, pdo, pdo_mysql

    # Use PHAN as alternative to PHPStan (no Laravel dependency conflicts)
    - name: Install Phan Static Analyzer
      run: composer require phan/phan --dev

    - name: Phan Static Analysis
      run: |
        cat > .phan/config.php << 'EOF'
        <?php
        return [
            'target_php_version' => '8.2',
            'directory_list' => [
                'app/',
                'vendor/laravel/framework/src/Illuminate'
            ],
            'exclude_analysis_directory_list' => [
                'vendor/'
            ],
            'suppress_issue_types' => [
                'PhanUnreferencedUseNormal',
                'PhanUnreferencedFunction'
            ]
        ];
        EOF
        mkdir -p .phan
        ./vendor/bin/phan --allow-polyfill-parser || true
      continue-on-error: true

    # Summary
    - name: Analysis Summary
      run: |
        echo "=== 📊 Code Quality Analysis Summary ==="
        echo "✅ Main Tests: Passed"
        echo "🎨 Laravel Pint: Code style checked"
        echo "🔒 Security Check: Vulnerabilities scanned"
        echo "📈 Code Coverage: Generated"
        echo "🔍 Static Analysis: Completed with multiple tools"
        echo ""
        echo "🎯 Quality Gates:"
        echo "- ✅ Tests must pass"
        echo "- ✅ Coverage minimum 70%"
        echo "- ⚠️  Style issues are warnings (non-blocking)"
        echo "- ⚠️  Static analysis issues are warnings (non-blocking)"