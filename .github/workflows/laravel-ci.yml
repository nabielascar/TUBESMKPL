name: Laravel CI with Code Quality

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, bcmath, pdo, pdo_mysql, xdebug
        coverage: xdebug

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    # Code Quality Tools Installation
    - name: Install PHP Code Quality Tools
      run: |
        composer require --dev phpmd/phpmd phpstan/phpstan squizlabs/php_codesniffer psalm/psalm friendsofphp/php-cs-fixer --no-update
        composer update --prefer-dist --no-progress

    - name: Copy .env and generate app key
      run: |
        cp .env.example .env
        php artisan key:generate

    - name: Set Laravel storage permission
      run: chmod -R 777 storage bootstrap/cache

    - name: Run Laravel migrations
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: root
        DB_PASSWORD: root
      run: php artisan migrate --force

    # Continuous Inspection Steps
    - name: PHP Code Sniffer (PHPCS)
      run: ./vendor/bin/phpcs --standard=PSR12 --ignore=vendor,storage,bootstrap/cache app/ tests/
      continue-on-error: true

    - name: PHP Mess Detector (PHPMD)
      run: ./vendor/bin/phpmd app/ text cleancode,codesize,controversial,design,naming,unusedcode --ignore-violations-on-exit
      continue-on-error: true

    - name: PHPStan Static Analysis
      run: |
        echo "includes:" > phpstan.neon
        echo "    - ./vendor/nunomaduro/larastan/extension.neon" >> phpstan.neon
        echo "parameters:" >> phpstan.neon
        echo "    paths:" >> phpstan.neon
        echo "        - app/" >> phpstan.neon
        echo "    level: 5" >> phpstan.neon
        echo "    ignoreErrors:" >> phpstan.neon
        echo "        - '#Call to an undefined method App\\\\Models\\\\.*::#'" >> phpstan.neon
        composer require --dev nunomaduro/larastan --no-update
        composer update nunomaduro/larastan --prefer-dist --no-progress
        ./vendor/bin/phpstan analyse --memory-limit=2G
      continue-on-error: true

    - name: Psalm Static Analysis
      run: |
        ./vendor/bin/psalm --init
        ./vendor/bin/psalm --show-info=false
      continue-on-error: true

    - name: PHP CS Fixer (Code Style)
      run: ./vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
      continue-on-error: true

    # Security Analysis
    - name: PHP Security Checker
      run: |
        composer require --dev enlightn/security-checker --no-update
        composer update enlightn/security-checker --prefer-dist --no-progress
        ./vendor/bin/security-checker security:check composer.lock
      continue-on-error: true

    # Laravel Specific Quality Checks
    - name: Laravel Pint (Code Style)
      run: |
        composer require --dev laravel/pint --no-update
        composer update laravel/pint --prefer-dist --no-progress
        ./vendor/bin/pint --test
      continue-on-error: true

    - name: Laravel Enlightn (Security & Performance)
      run: |
        composer require --dev enlightn/enlightn --no-update
        composer update enlightn/enlightn --prefer-dist --no-progress
        php artisan enlightn --ci
      continue-on-error: true

    # Run Tests with Coverage
    - name: Run Laravel tests with coverage
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: root
        DB_PASSWORD: root
        XDEBUG_MODE: coverage
      run: php artisan test --coverage --min=80

    # Code Coverage Report
    - name: Generate Code Coverage Report
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: root
        DB_PASSWORD: root
        XDEBUG_MODE: coverage
      run: |
        php artisan test --coverage-clover=coverage.xml
        php artisan test --coverage-html=coverage-html

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    # Code Quality Gate
    - name: Code Quality Gate
      run: |
        echo "=== Code Quality Summary ==="
        echo "✅ PHP Code Sniffer: Check PSR-12 compliance"
        echo "✅ PHP Mess Detector: Detect code smells"
        echo "✅ PHPStan: Static analysis level 5"
        echo "✅ Psalm: Additional static analysis"
        echo "✅ Security Checker: Vulnerability scan"
        echo "✅ Laravel Pint: Laravel code style"
        echo "✅ Laravel Enlightn: Security & performance audit"
        echo "✅ Code Coverage: Minimum 80%"

  # Alternative: Using CodeClimate for Code Quality
  code-climate:
    runs-on: ubuntu-latest
    needs: laravel-tests
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, bcmath, pdo, pdo_mysql, xdebug
        coverage: xdebug

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Generate coverage for CodeClimate
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: ":memory:"
        XDEBUG_MODE: coverage
      run: |
        cp .env.example .env
        php artisan key:generate
        php artisan test --coverage-clover=clover.xml

    - name: CodeClimate Test Reporter
      uses: paambaati/codeclimate-action@v5.0.0
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      with:
        coverageLocations: clover.xml:clover

  # Alternative: Using Scrutinizer CI
  scrutinizer:
    runs-on: ubuntu-latest
    needs: laravel-tests
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, bcmath, pdo, pdo_mysql, xdebug
        coverage: xdebug

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Generate coverage for Scrutinizer
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: ":memory:"
        XDEBUG_MODE: coverage
      run: |
        cp .env.example .env
        php artisan key:generate
        php artisan test --coverage-clover=coverage.xml

    - name: Upload coverage to Scrutinizer
      run: |
        wget https://scrutinizer-ci.com/ocular.phar
        php ocular.phar code-coverage:upload --format=php-clover coverage.xml