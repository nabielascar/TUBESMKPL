name: Laravel CI with Code Quality

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, bcmath, pdo, pdo_mysql, xdebug
        coverage: xdebug

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: Copy .env and generate app key
      run: |
        cp .env.example .env
        php artisan key:generate

    - name: Set Laravel storage permission
      run: chmod -R 777 storage bootstrap/cache

    - name: Run Laravel migrations
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: root
        DB_PASSWORD: root
      run: php artisan migrate --force

    # Install Laravel Pint (Laravel's official code style)
    - name: Install Laravel Pint
      run: composer require laravel/pint --dev --no-update && composer update laravel/pint

    - name: Laravel Pint (Code Style Check)
      run: ./vendor/bin/pint --test
      continue-on-error: true

    # Install PHPStan with Larastan
    - name: Install PHPStan + Larastan
      run: |
        composer require phpstan/phpstan nunomaduro/larastan --dev --no-update
        composer update phpstan/phpstan nunomaduro/larastan --with-all-dependencies

    - name: PHPStan Analysis
      run: |
        cat > phpstan.neon << EOF
        includes:
            - ./vendor/nunomaduro/larastan/extension.neon
        parameters:
            paths:
                - app/
            level: 5
            ignoreErrors:
                - '#Call to an undefined method App\\\\Models\\\\.*::#'
        EOF
        ./vendor/bin/phpstan analyse --memory-limit=2G
      continue-on-error: true

    # Install Security Checker
    - name: Install Security Checker
      run: composer require enlightn/security-checker --dev --no-update && composer update enlightn/security-checker

    - name: Security Vulnerability Check
      run: ./vendor/bin/security-checker security:check composer.lock
      continue-on-error: true

    # Install Laravel Enlightn
    - name: Install Laravel Enlightn
      run: composer require enlightn/enlightn --dev --no-update && composer update enlightn/enlightn

    - name: Laravel Enlightn Security & Performance Audit
      run: php artisan enlightn --ci
      continue-on-error: true
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: root
        DB_PASSWORD: root

    # Run Tests with Coverage
    - name: Run Laravel tests with coverage
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: root
        DB_PASSWORD: root
        XDEBUG_MODE: coverage
      run: php artisan test --coverage --min=70

    # Generate Coverage Report
    - name: Generate Code Coverage Report
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: laravel_test
        DB_USERNAME: root
        DB_PASSWORD: root
        XDEBUG_MODE: coverage
      run: php artisan test --coverage-clover=coverage.xml

    # Upload to Codecov (Optional)
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    # Code Quality Summary
    - name: Code Quality Summary
      run: |
        echo "=== ✅ Code Quality Checks Completed ==="
        echo "🎨 Laravel Pint: Code style compliance"
        echo "🔍 PHPStan + Larastan: Static analysis"
        echo "🔒 Security Checker: Vulnerability scan"
        echo "⚡ Laravel Enlightn: Security & performance audit"
        echo "📊 Code Coverage: Generated and uploaded"
        echo ""
        echo "📋 Next Steps:"
        echo "- Review any warnings above"
        echo "- Check coverage report"
        echo "- Fix any security issues found"

  # Separate job for additional quality tools (optional)
  extended-quality-check:
    runs-on: ubuntu-latest
    needs: laravel-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, bcmath, pdo, pdo_mysql

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress

    # Install PHPCS
    - name: Install PHP CodeSniffer
      run: composer require squizlabs/php_codesniffer --dev

    - name: PHP CodeSniffer Check
      run: ./vendor/bin/phpcs --standard=PSR12 app/ tests/ --ignore=*/vendor/*,*/storage/*,*/bootstrap/cache/*
      continue-on-error: true

    # Install PHPMD
    - name: Install PHP Mess Detector
      run: composer require phpmd/phpmd --dev

    - name: PHP Mess Detector
      run: ./vendor/bin/phpmd app/ text cleancode,codesize,design,naming,unusedcode --ignore-violations-on-exit
      continue-on-error: true

    - name: Extended Quality Summary
      run: |
        echo "=== 🔍 Extended Quality Analysis ==="
        echo "📏 PHPCS: PSR-12 compliance check"
        echo "🧹 PHPMD: Code quality analysis"
        echo "✨ All extended checks completed!"